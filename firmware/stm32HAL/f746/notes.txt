Notes on the Project Design

- An STM32 Project
The original Arduino code worked, but it was a bit of a dog's breakfast.
Moving away from the Arduino ".ino" format allows for what I believe to be a 
cleaner source structure.

- Using the STM32 HAL library
After writing a few low level libraries, I wanted to try taking 
advantage of a "canned" library for the peripherals.  Many think that this incurs
a lot of overhead.  Time will tell if it will be a significant impedement.  Note that
I did use the LL routines for the USART, as the HAL library didn't provide enough
flexibility to implement the terminal process that I wanted.

- Using STM32CubeIDE-generated code
The configurator built into the STM32CubeIDE makes it very easy to experiment with
different hardware configurations.  The auto-generated code then makes the base
configuration simple.  I've kept my code, to the extent possible, separate from
the auto-generated code.  The auto-generated code is in the "Core" folder, libraries
are in the "Libs" folder, and the application code is in the "Project" folder.

- This is a C++ project
Most embedded software seems to be written in C, and I would have used C if I could.
However, to avoid straying too far from the original Arduino software I needed to 
use the MPU6050 library from https://github.com/jrowberg/i2cdevlib
The STM32 and STM32HAL versions of the i2cdevlib MPU6050 are not complete, missing
some of the Digital Motion Processor (dmp) routines.  As an alternative I used
the Arduino C++ routines modified as necessary to call the HAL I2C library.  As
C routines can't call C++ classes, the code ended up being written in C++.

- But, but, isn't the main routine (generated by the IDE) written in C?
Yes.  The main routine calls a procedure, app_entry(), which is the entry point
into the C++ code.  app_entry() is defined in appEntry.hpp to have an extern "C"
interface, allowing this C++ routine to be called from main.c.  It's a cludge, but
it works.

- Why not just convert main.c to main.cpp and avoid app_entry()?
Every time the hardware configurator regenerates code to match an modified
hardware configuration, it generates main.c, not main.cpp.  This would leave any
user modifications to the main.cpp file stranded.  Having main() call app_entry()
isn't the cleanest code, but it's better than using multiple Arduino .ino files. 